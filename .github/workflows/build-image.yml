name: Docker Build

on:
  push:
    branches: 
      - "main"
    paths:
      - "**Dockerfile"
  # pull_request_target:
  #   branches: 
  #     - "main"
  #   types:
  #     - closed
  #   #   - opened
  #   #   - synchronize
  #   #   - reopened
  #   paths:
  #     - "**Dockerfile"
  pull_request:
    branches: 
      - "main"
    types:
      - ready_for_review
      - review_requested
    paths:
      - "**Dockerfile"
  workflow_dispatch:
    inputs:
      godot_version:
        description: 'Godot version to build'
        required: false
        default: ''
      steamworks_version:
        description: 'Steamworks SDK version to use'
        required: false
        default: '1.59'
      dry_run:
        description: Skip Docker build
        type: boolean
        default: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: ${{ github.ref }}

    - name: Get tag name
      id: get_ref
      run: echo "tag=${GITHUB_REF_NAME//\//_}" >> $GITHUB_OUTPUT

    - name: Determine Godot and Steamworks Version
      id: versions
      run: |
        if [[ "${{ github.event.inputs.godot_version }}" == "" ]]; then
          # Fetch the latest Godot version if not specified
          GODOT_VERSION=$(curl -s https://api.github.com/repos/godotengine/godot/releases/latest | jq -r '.tag_name' | sed -e 's/-stable//')
        else
          # Use the manually specified Godot version
          GODOT_VERSION="${{ github.event.inputs.godot_version }}" | sed -e 's/-stable//'
        fi
        echo "GODOT_VERSION=$GODOT_VERSION" >> $GITHUB_ENV
        echo "godot_version=$GODOT_VERSION" >> $GITHUB_OUTPUT
        
        # Set default Steamworks version if not specified, using PR event as a condition
        if [[ -z "${{ github.event.inputs.steamworks_version }}" ]]; then
          # Default Steamworks version, adjust as necessary
          DEFAULT_STEAMWORKS_VERSION="1.59"
          STEAMWORKS_VERSION=$DEFAULT_STEAMWORKS_VERSION
        else
          STEAMWORKS_VERSION="${{ github.event.inputs.steamworks_version }}"
        fi
        echo "STEAMWORKS_VERSION=$STEAMWORKS_VERSION" >> $GITHUB_ENV
        echo "steamworks_version=$STEAMWORKS_VERSION" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      if: ${{ github.event.inputs.dry_run != 'true' }}
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      if: ${{ github.event.inputs.dry_run != 'true' }}
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
   
    - name: Build and push the Docker image
      if: ${{ github.event.inputs.dry_run != 'true' }}
      uses: docker/build-push-action@v4
      with:
        context: .
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/steamrt-godot:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/steamrt-godot:${{ steps.get_ref.outputs.tag }}
        push: true
        cache-from: type=gha
        cache-to: type=gha,mode=max,ignore-error=true
        build-args: |
          STEAMWORKS_COOKIE=${{ secrets.STEAMWORKS_COOKIE }}
          GODOT_VERSION=${{ steps.versions.outputs.godot_version }}
          STEAMWORKS_VERSION=${{ steps.versions.outputs.steamworks_version }}

    - name: Generate build-info JSON file
      run: |
        mkdir -p gh-pages/build-info
        echo "{\"godot_version\": \"${{ steps.versions.outputs.godot_version }}\", \"steamworks_version\": \"${{ steps.versions.outputs.steamworks_version }}\"}" > gh-pages/build-info/latest.json
        cp gh-pages/build-info/latest.json gh-pages/build-info/${{ steps.get_ref.outputs.tag }}_${{ github.run_id }}.json

    - name: Commit build-info JSON file to gh-pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./gh-pages